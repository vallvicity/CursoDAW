[
  {
    "objectID": "labse02moviemanager.html",
    "href": "labse02moviemanager.html",
    "title": "Lab #2: Movie Manager",
    "section": "",
    "text": "We are going to develop this app according to these requirements:\n\nüìò Linux Lab#SE02-1: Movie Review and Rating\nCreate a Maven/Gradle Java SE Project.\n\nAdd the needed dependencies:\n    Lombok\n    Junit\n    Java Faker\n\nCreate three Java classes to define the Model. Java SE Classes:\n\n    Movie: The Movie class represents a movie that is being reviewed. It has the following attributes:\n        title: a String representing the title of the movie\n        reviews: a Set of Review objects representing the reviews that have been written for this movie\n        Critic: The Critic class represents a critic who writes reviews.\n\n    The Critic class has the following attributes:\n        name: a String representing the name of the critic\n        Review: The Review class represents a review of a movie written by a critic.\n\n    The Review class has the following attributes:\n        movie: a Movie object representing the movie being reviewed\n        critic: a Critic object representing the critic who wrote the review\n        rating: an int representing the rating given by the critic (on a scale of 1 to 5)\n        comment: a String representing the comment written by the critic about the movie\n\nWith Junit dependency create unitary test to test objects and operations.\n\nFrom here you should add new features once all the test are passed.\n    Operations, you could think in a Manager Class o similar\n    New fields/attributes and new classes\n    New compositions and inherence: expand your model\n    Use Factory design pattern to create new objects\n\n\nSolving discussion\nAs a starting point, we‚Äôre going to leave the dependencies for later, let‚Äôs focus on the main requirements: the Classes, so we can have an overview of the project.\nThe core of this lab is based in these three classes and how are they going to interact between them.\n\n\n\n\nclassDiagram\n    class Movie{\n        -String title\n        -ArrayList<Review> reviews\n        -Critic critic\n    }\n    class Critic{\n        -String name\n        -Review review\n    }\n    class Review{\n        -Movie movie\n        -Critic critic\n        -int rating\n        -String comment\n    }\n\n\n\n\n\n\n\n\nOur goal is to have a data-store where we can check some movies and see their reviews, update them or even delete them. But we need to solve some discussion first: Is a movie going to have several reviews? Which class depends on which? Dependency? Inheritance? Multiplicity?\nLet‚Äôs consider that any movie could have different reviews from different Critics. In that case the class diagram would go as follows:\n\n\n\n\nclassDiagram \n    Critic \"1\" *-- \"*\" Review: Writes\n    Critic \"*\" *-- \"*\" Movie: Rates\n    Review \"*\" --o \"1\" Movie: Has\n    class Movie{\n        -String title\n        -ArrayList<Review> reviews\n        -Critic critic\n    }\n    class Critic{\n        -String name\n        -Review review\n    }\n    \n    class Review{\n        -Movie movie\n        -Critic critic\n        -int rating\n        -String comment\n    }"
  },
  {
    "objectID": "AlbertusDylemma.html",
    "href": "AlbertusDylemma.html",
    "title": "Albertus‚Äô Dylemma",
    "section": "",
    "text": "flowchart LR\n\nA[Problem] --> B(Let's code & See what happens...)\nC[The Pitt]\nD(Optimal Solution)\nC --> B\nB --> C\nC --> A"
  },
  {
    "objectID": "AlbertusDylemma.html#introduction",
    "href": "AlbertusDylemma.html#introduction",
    "title": "Albertus‚Äô Dylemma",
    "section": "Introduction",
    "text": "Introduction\n\nAs a future developer I want to relate the struggles and reflect the mentality that you, my fellow reader and potential developer, should avoid.\n\n\n\nMy pourpose is to stablish some patterns of productive thinking to help you to get out from the Valley of Dispair a.k.a. (and from now on) The Pitt that most likely you would fall into.\n\n\nTrust me, I‚Äôve been there‚Ä¶Actually I AM constantly there, that‚Äôs why I want to reflect that in this kind of journal.\n\n\n\n\n\n\nAnyway\n\n\n\n\n\nThat‚Äôs the tricky part, I don‚Äôt know how as of today (01/19/2023). But hopefully I will. First of all you need to understand the concept of iteration, my friend. With that in mind, we just need to start."
  },
  {
    "objectID": "AlbertusDylemma.html#albertus-dylemma-what-are-we-talking-about",
    "href": "AlbertusDylemma.html#albertus-dylemma-what-are-we-talking-about",
    "title": "Albertus‚Äô Dylemma",
    "section": "Albertus‚Äô Dylemma‚Ä¶ What are we talking about?",
    "text": "Albertus‚Äô Dylemma‚Ä¶ What are we talking about?\nYou surely noticed the flowchart above. It‚Äôs such a common pattern for us who just started programming. Have you ever feel identified with it?\nAs you keep progressing in your coding lessons, problems are going to be slightly more difficult and complex every time. Until you reach to a point when you can‚Äôt completely see the solution in your mind.\nYou‚Äôll probably see straight how to get from A to B, but from B to C you see it blurry‚Ä¶ Well, then you just have to get to B so you can see more clear how to get to C better, right?\nYes, I always trick to myself like that‚Ä¶\n\n\n\n\n\n\nWhen we talk about Albertus‚Äô Dylemma:\n\n\n\nIt is that moment when you either need to stop, take two steps back and think what led you into this or keep hitting the wall (and the keyboard with your pointless code).\n\n\nI‚Äôm going to try to develop that idea on some exercises based on this lab:\n\n\n\n\n\n\nüìò Linux Lab#SE02-1: Movie Review and Rating\nCreate a Maven/Gradle Java SE Project.\n\nAdd the needed dependencies:\n    Lombok\n    Junit\n    Java Faker\n\nCreate three Java classes to define the Model. Java SE Classes:\n\n    Movie: The Movie class represents a movie that is being reviewed. It has the following attributes:\n        title: a String representing the title of the movie\n        reviews: a Set of Review objects representing the reviews that have been written for this movie\n        Critic: The Critic class represents a critic who writes reviews.\n\n    The Critic class has the following attributes:\n        name: a String representing the name of the critic\n        Review: The Review class represents a review of a movie written by a critic.\n\n    The Review class has the following attributes:\n        movie: a Movie object representing the movie being reviewed\n        critic: a Critic object representing the critic who wrote the review\n        rating: an int representing the rating given by the critic (on a scale of 1 to 5)\n        comment: a String representing the comment written by the critic about the movie\n\n\n\nSo I have this requirement:\n\nMake a program that can manage information about movies such as:\n\nMovie name.\nIts director (e.g.¬†so I can plan a themed marathon with my friends.)\n\nDirector‚Äôs prestige: I want to know how many Oscars has the director won through his career.\n\nIt also needs to include its critics made by the best professionals and to know how well or poorly rated it is.\n\n\nUser Story #1 - The easiest and certain way to hit the wall.\nLet‚Äôs just start coding:\n\npublic Class MovieManager  {\n    public static void main(String[])\n}\n\n\n\n\n\nflowchart LR\nA[Problema] --> B[Decision]\nB --> C(Code & See)\nB --> D(Piensa)\nD --> E[Sabes lo que haces?]\nC --> G[El Pozo]\nD --> F[Te enamoraste de tu primera idea?]\nG --> A"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Curso Cifo Daw",
    "section": "",
    "text": "This is a Quarto website.\nEmpezamos con markdown.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "intellij idea.html",
    "href": "intellij idea.html",
    "title": "IntellIJ Idea",
    "section": "",
    "text": "IDE de Java"
  },
  {
    "objectID": "labs.html",
    "href": "labs.html",
    "title": "Labs",
    "section": "",
    "text": "Aqu√≠ colocar√© los apuntes y progresos hechos en los Labs.\n\nLab SE01-1: Maven/Gradle Person and Account\n\n\n\nclassDiagram\n\n\n\n\nLab SE02 Movie-Review\nUS: Vamos a crear un gestor de pel√≠culas en el que podamos ver los directores, cr√≠ticas, comentarios y lo que se nos ocurra."
  },
  {
    "objectID": "apps.html",
    "href": "apps.html",
    "title": "Apps",
    "section": "",
    "text": "Apps utilizadas en el curso y su documentaci√≥n, teclas r√°pidas, tips,‚Ä¶\n\nIntellIJ Idea\nIDE para Java.\n\n\nVS Code\nIDE m√°s general.\n\n\nFigma\nDiagramas, flowcharts.\n\n\nMermaid\nVa de PM para los classDiagrams de Java o los Sequence Charts."
  },
  {
    "objectID": "figma.html",
    "href": "figma.html",
    "title": "Figma",
    "section": "",
    "text": "Figma es una web que te va a permitir hacer diagramas\nEste es un ejemplo\n\n\n\nEjemplo de diagrama"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]